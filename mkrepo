#
# mkrepo : リポジトリ作成スクリプト
#

MYNAME="$0";
MYARGS="$*";

. ./common.env
. ./utility.h

usage()
{
cat 1>&2 <<EOF
usage : $MYNAME command

command :
	all ........... make all repository data.
			(以下のarchive, env, confを実行)

	archive ....... setup archive directory
	env ........... make env files for all instance.
	conf .......... make config files for all instance.

	mkpackage ..... make config package for db / batch server 
EOF
}

main()
{
	if [ "$#" -eq 0 ]; then
		usage;
		exit 1;
	fi

	cmd="$1";

	case "$cmd" in
	all | archive | env | conf | clean | mkpackage ) $cmd ;;
	* )
		usage;
		exit 1
		;;
	esac
}

all()
{
	archive;
	env;
	conf;
	./fwctl mkscript;
	mkdbscript;
	mkpackage;
}

env()
{
	log "make all instance environment file into $REPO_DIR";
	./mkenv-all;
}

conf()
{
	log "make all instance config file into $REPO_DIR";
	./mkconf-all;
}

archive()
{
	log "setup $ARCHIVE_DIR";
	if [ ! -s "$ARCHIVE_DIR/app.war" ]
	then
		cp test/testap/app.war $ARCHIVE_DIR;
	fi	
	if [ ! -d "$ARCHIVE_DIR/tomcat-connectors-1.2.42" ]
	then
		cp mod_jk/tomcat-connectors-1.2.42.tar $ARCHIVE_DIR;
		( cd $ARCHIVE_DIR; tar xf tomcat-connectors-1.2.42.tar )
	fi
}

clean()
{
	message "remove $REPO_DIR and $SCRIPT_DIR directory";
	rm -rf $REPO_DIR;
	rm -rf $SCRIPT_DIR;
}

mkdbscript()
{
	log "creaing DB(postgreSQL) script into $DB_SCRIPT_DIR";
	mkdir -p "$DB_SCRIPT_DIR";
	create_pg_hba "$DB_SCRIPT_DIR/pg_hba.conf";
	cp ./dbtools/* "$DB_SCRIPT_DIR";
	cp ./common.env "$DB_SCRIPT_DIR/..";
	if [ -s "../common_static.env" ]; then cp ../common_static.env "$DB_SCRIPT_DIR/.."; fi
	if [ -s "./common_static.env" ]; then cp ./common_static.env "$DB_SCRIPT_DIR"; fi
}

mkpackage()
{
	cp ./utility.h "$SCRIPT_DIR";
	cp ./fwctl "$SCRIPT_DIR";
	cp ./usergroupctl "$SCRIPT_DIR";
	cp ./usergroupctl-all "$SCRIPT_DIR";
	( cd "$SCRIPT_DIR"; if [ ! -L $REPO_DIR ]; then ln -s ../$REPO_DIR .; fi; )
	
	mydirname="`basename \`pwd\``";
	log "TAR package for db/batch server setup (package:../$mydirname-package.tar := ($SCRIPT_DIR, $REPO_DIR))"
	tar cf ../$mydirname-package.tar $SCRIPT_DIR $REPO_DIR
}

create_pg_hba()
{
	tgt="$1";
	log "creating PostgreSQL config file ($tgt)"
	generate_pg_hba >$tgt
}

generate_pg_hba()
{
	cat <<EOF
# PostgreSQL Client Authentication Configuration File
# ===================================================
# 
# Refer to the "Client Authentication" section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
# 
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
# 
# local      DATABASE  USER  METHOD  [OPTIONS]
# host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]

####################
## user defined
#####################
#
#TYPE   DATABASE        USER            ADDRESS                 METHOD

local   all             postgres                                md5
local   all             ${PROJ_NAME}db                                  md5

EOF
	for i in $DB_INSTANCE_LIST;
	do
		echo "host    ${i}D             ${i}DU            0.0.0.0/0               md5"
	done

	cat <<EOF

# END of user defined
EOF
}

main $*;

